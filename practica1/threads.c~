#include <stdio.h>
#include <stdlib.h>
#include "threads.h"
#include <ucontext.h>
#include <sys/time.h>
#include <err.h>

enum{
	AVAILABLE = 0,
	RUNNING = 1,
	MAX_THREAD = 32
};

typedef struct thread_t thread_t;

typedef struct timeval timeval;

struct thread{
	void * stack_p;
	ucontext_t u_c;
	int id;
	timeval s_time;
	int state;
};

unsigned int current_thread = 0;
thread tthread[TABLE_SIZE];


void 
initthreads(void){
	ttable[0].id = 0;
	ttable[0].state = RUNNING;
	ttable[0].stack_p = NULL;
	if(gettimeofday(&ttable[0].s_time, NULL) == -1)
		err(1, "gettimeofday init");
	if(getcontext(&ttable[0].u_c) == -1)
		err(1, "getcontext initthread");
}

int createthread(void (*mainf)(void*), void *arg, int stacksize)
{
	ttable[].stack_p = malloc(stacksize);
}

void exitsthread(void)
{

}

void yieldthread(void)
{

}

int curidthread(void)
{
	 return ttable[current_thread].id;
}
